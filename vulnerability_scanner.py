import nmap 
import socket 
import requests 
from bs4 import BeautifulSoup
import json 


# Step 1: Port Scanner Module
def scan_ports(target_ip):
    """
    Scan the target IP for open ports using Nmap.

    :param target_ip: IP address to scan
    :return: Dictionary with open ports and detected services
    """
    nm = nmap.PortScanner()  # Initialize the Nmap PortScanner
    nm.scan(target_ip, '1-1024')  # Scan the first 1024 ports

    open_ports = {}

    for host in nm.all_hosts():
        print(f"Scanning Host: {host}")
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()  # Get the list of open ports for this protocol
            for port in lport:
                state = nm[host][proto][port]['state']
                if state == 'open':
                    service = nm[host][proto][port]['name']
                    version = nm[host][proto][port]['version']
                    open_ports[port] = {'service': service, 'version': version}
                    print(f"Port {port} is open and running {service} ({version})")
    return open_ports


def grab_banner(ip, port):
    """
    Grab the service banner running on a given IP and port.

    :param ip: Target IP address
    :param port: Target port number
    :return: Service banner (if available)
    """
    try:
        s = socket.socket()
        s.settimeout(3)
        s.connect((ip, port))
        banner = s.recv(1024).decode().strip()
        s.close()
        return banner
    except Exception as e:
        return str(e)


def check_vulnerability(service_name, version):
    """
    Check for known vulnerabilities in a given service version.

    :param service_name: Name of the service (e.g., 'nginx')
    :param version: Version of the service (e.g., '1.18.0')
    :return: List of vulnerabilities found
    """
    # Example: Fetch data from the CVE website (or use an API like NVD)
    url = f"https://www.cvedetails.com/version-search.php?product={service_name}&version={version}"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    vulnerabilities = []
    # Parse the HTML to extract CVE IDs and descriptions (simplified example)
    for row in soup.find_all('tr', class_='srrowns'):
        cve_id = row.find('td', class_='cvesummarylong').text.strip()
        vulnerabilities.append(cve_id)
    
    return vulnerabilities


# Step 4: Report Generator Module
def generate_report(scan_results, filename='vulnerability_report.json'):
    """
    Generate a JSON report of the scan results.

    :param scan_results: Dictionary containing scan results
    :param filename: Output file name
    """
    with open(filename, 'w') as file:
        json.dump(scan_results, file, indent=4)
    print(f"Report generated and saved as {filename}")


# Main Function to Combine All Steps
def main():
    print("Vulnerability Scanner Started")

    # Input target IP address
    target_ip = input("Enter the target IP address (e.g., 192.168.1.1): ")

    # Step 1: Scan Ports
    open_ports = scan_ports(target_ip)
    scan_results = {target_ip: {'ports': {}, 'vulnerabilities': []}}

    # Step 2: Grab Banners and Detect Vulnerabilities
    for port, service_info in open_ports.items():
        banner = grab_banner(target_ip, port)
        service_info['banner'] = banner

        # Step 3: Check for Vulnerabilities
        vulnerabilities = check_vulnerability(service_info['service'], service_info['version'])
        scan_results[target_ip]['ports'][port] = service_info
        scan_results[target_ip]['vulnerabilities'].extend(vulnerabilities)

    # Step 4: Generate Report
    generate_report(scan_results)

    print("Vulnerability Scanner Completed!")


if __name__ == "__main__":
    main()
